package org.usfirst.frc.team5449.robot.subsystems;

import org.usfirst.frc.team5449.robot.OI;
import org.usfirst.frc.team5449.robot.Robot;
import org.usfirst.frc.team5449.robot.command.Drive;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

/**
 *
 */
public class Chasis extends Subsystem {
	
	private PWMTalonSRX LeftRear;
	private PWMTalonSRX LeftFront;
	private PWMTalonSRX RightRear;
	private PWMTalonSRX RightFront;
	private MecanumDrive mecanumDrive;
	
    public Chasis(){
    	//define motors
    	LeftFront = new PWMTalonSRX(OI.leftfront);
    	LeftRear = new PWMTalonSRX(OI.leftrear);
    	RightFront = new PWMTalonSRX(OI.rightfront);
    	RightRear = new PWMTalonSRX(OI.rightrear);
    	//set inverted motors (default: RIGHT ???)
    	RightFront.setInverted(true);
    	RightRear.setInverted(true);
    	//build mecanum drive
    	mecanumDrive = new MecanumDrive(LeftFront, LeftRear, RightFront, RightRear);
    }	
	
	public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        setDefaultCommand(new Drive());
    }
	
	public void testDrive(){
		double x = Robot.oi.getJoystickX();
		double y = Robot.oi.getJoystickY();
		double z = Robot.oi.getJoystickZ();
		double[] ChasisPower = new double[4];
		ChasisPower[OI.leftfront-1] = x+y+z;
		ChasisPower[OI.rightfront-1] = -x+y-z;
		ChasisPower[OI.leftrear-1] = -x+y+z;
		ChasisPower[OI.rightrear-1] = x+y-z;
		double trim_max = Math.max(Math.max(Math.max(Math.abs(ChasisPower[0]),Math.abs(ChasisPower[1])),
                Math.max(Math.abs(ChasisPower[2]),Math.abs(ChasisPower[3]))),1);
		for(int i=0; i<ChasisPower.length;i++){
			ChasisPower[i] /= trim_max;
		}
		LeftFront.set(ChasisPower[OI.leftfront-1]);
		RightFront.set(ChasisPower[OI.rightfront-1]);
		LeftRear.set(ChasisPower[OI.leftrear-1]);
		RightRear.set(ChasisPower[OI.rightrear-1]);
	}
	
	public void defaultMecanum(){
		mecanumDrive.driveCartesian(Robot.oi.getJoystickY(), 
				Robot.oi.getJoystickX(), Robot.oi.getJoystickZ());
	}
	public void fieldMecanum(){
		//NOT configured!!!!
		double angle = Robot.oi.getGyroZ();
		mecanumDrive.driveCartesian(Robot.oi.getJoystickY(), 
				Robot.oi.getJoystickX(), Robot.oi.getJoystickZ(), angle);
	}
	public void polarMecanum(double magnitude, double angle, double zRotation){
		mecanumDrive.drivePolar(magnitude, angle, zRotation);
	}
	
	public void stop(){
		LeftFront.stopMotor();
		RightFront.stopMotor();
		LeftRear.stopMotor();
		RightRear.stopMotor();
	}
	 
}

